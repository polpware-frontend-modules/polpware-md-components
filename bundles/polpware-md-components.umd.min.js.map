{"version":3,"sources":["ng://@polpware/md-components/lib/indicator/modal.component.ts","ng://@polpware/md-components/lib/services/spinner-service.impl.ts","ng://@polpware/md-components/lib/md-components.module.ts"],"names":["PolpMdIndicatorModal","dialogRef","data","this","title","prototype","onNoClick","close","Component","args","selector","template","MatDialogRef","Inject","MAT_DIALOG_DATA","PolpMdSpinnerServiceImpl","_dialog","_showingTimer","_showingDelay","_dismissingTimer","_diaglogRef","setDelay","seconds","show","_this","clearTimeout","setTimeout","open","IndicatorModal","width","hide","Injectable","MatDialog","PolpMdComponentsModule","parentModule","Error","forRoot","ngModule","NgModule","declarations","imports","MatProgressSpinnerModule","exports","entryComponents","providers","decorators","type","Optional","SkipSelf"],"mappings":"wXAAA,IAAAA,EAAA,WAYI,SAAAA,EACWC,EACyBC,GADzBC,KAAAF,UAAAA,EACyBE,KAAAD,KAAAA,EAChCC,KAAKC,MAAQF,EAAKE,OAAS,GAMnC,OAHIJ,EAAAK,UAAAC,UAAA,WACIH,KAAKF,UAAUM,6BAftBC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,0BACVC,SAAA,iMALgBC,EAAAA,gDAaXC,EAAAA,OAAMJ,KAAA,CAACK,EAAAA,sBAOhBd,EArBA,GCYAe,EAAA,WASI,SAAAA,EAAoBC,GAAAb,KAAAa,QAAAA,EAChBb,KAAKc,cAAgB,KACrBd,KAAKe,cAbqB,IAc1Bf,KAAKgB,iBAAmB,KACxBhB,KAAKiB,YAAc,KA2F3B,OAxFWL,EAAAV,UAAAgB,SAAP,SAAgBC,GACZnB,KAAKe,cAA0B,IAAVI,GAIlBP,EAAAV,UAAAkB,KAAP,SAAYnB,GAAZ,IAAAoB,EAAArB,KAEI,QAFQ,IAAAC,IAAAA,EAAA,gBAEJD,KAAKiB,YAgBT,OAAIjB,KAAKgB,kBACLM,aAAatB,KAAKgB,uBAClBhB,KAAKgB,iBAAmB,SAMxBhB,KAAKc,gBAKTd,KAAKc,cAAgBS,WAAW,WAE5BF,EAAKP,cAAgB,KAErBO,EAAKJ,YAAcI,EAAKR,QAAQW,KAAKC,EAAgB,CACjDC,MAAO,QACP3B,KAAM,CACFE,MAAOA,MAGhBD,KAAKe,iBAlCAf,KAAKgB,mBACLM,aAAatB,KAAKgB,kBAClBhB,KAAKgB,iBAAmB,IAoC7BJ,EAAAV,UAAAyB,KAAP,WAAA,IAAAN,EAAArB,KAEI,OAAIA,KAAKc,eACLQ,aAAatB,KAAKc,oBAClBd,KAAKc,cAAgB,OAMrBd,KAAKgB,kBACLM,aAAatB,KAAKgB,uBAClBhB,KAAKgB,iBAAmBO,WAAW,WAE/BF,EAAKL,iBAAmB,KAGpBK,EAAKJ,cACLI,EAAKJ,YAAYb,QACjBiB,EAAKJ,YAAc,OAxFT,YAgGlBjB,KAAKiB,cACLjB,KAAKgB,iBAAmBO,WAAW,WAG3BF,EAAKJ,cACLI,EAAKJ,YAAYb,QACjBiB,EAAKJ,YAAc,OAtGT,4BAG7BW,EAAAA,sDAXQC,EAAAA,aAmHTjB,EAxGA,GCZAkB,EAAA,WA8BI,SAAAA,EAAoCC,GAChC,GAAIA,EACA,MAAM,IAAIC,MACN,6EAGhB,OAZWF,EAAAG,QAAP,WACI,MAAO,CACHC,SAAUJ,wBAhBrBK,EAAAA,SAAQ7B,KAAA,CAAC,CACN8B,aAAc,CAACvC,GACfwC,QAAS,CACLC,EAAAA,0BAEJC,QAAS,CAAC1C,GACV2C,gBAAiB,CACb3C,GAEJ4C,UAAW,CACP7B,gDAU8CkB,EAAsBY,WAAA,CAAA,CAAAC,KAA3DC,EAAAA,UAAQ,CAAAD,KAAIE,EAAAA,cAM7Bf,EApCA","sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\n@Component({\r\n    selector: 'polp-md-indicator-modal',\r\n    templateUrl: 'modal.component.html'\r\n})\r\nexport class PolpMdIndicatorModal {\r\n\r\n    public title: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<PolpMdIndicatorModal>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any) {\r\n        this.title = data.title || '';\r\n    }\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\n\nimport {\n    ISpinnerService\n} from '@polpware/ngx-spinner';\n\nimport { PolpMdIndicatorModal as IndicatorModal } from '../indicator/modal.component';\n\nconst DismissingDelayPeroid = 300;\nconst DefaultShowingDelayPeroid = 500;\n\n@Injectable()\nexport class PolpMdSpinnerServiceImpl implements ISpinnerService {\n\n    private _diaglogRef: MatDialogRef<IndicatorModal>;\n\n    private _showingTimer: any;\n    private _showingDelay: number;\n    private _dismissingTimer: any;\n\n    constructor(private _dialog: MatDialog) {\n        this._showingTimer = null;\n        this._showingDelay = DefaultShowingDelayPeroid;\n        this._dismissingTimer = null;\n        this._diaglogRef = null;\n    }\n\n    public setDelay(seconds: number) {\n        this._showingDelay = seconds * 1000;\n    }\n\n    // Override\n    public show(title: string = 'Loading ...') {\n        // If there is one already, use it.\n        if (this._diaglogRef) {\n\n            // However, we need to cancel the dismiss timer.\n            // It is safe, because we expect that \"hide\" is to be called\n            // sometime later from this moment on.\n            if (this._dismissingTimer) {\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = 0;\n            }\n\n            return;\n        }\n\n        // If we have already scheduled to dismiss the spinner,\n        // we just need to clear the scheduler.\n        // Please refer to the above for the reason.\n        if (this._dismissingTimer) {\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = 0;\n            return;\n        }\n\n        // If we have already scheduled to show the spinner, we just\n        // use this schedule. \n        if (this._showingTimer) {\n            return;\n        }\n\n        // Otherwise, schdule to show the spinner.\n        this._showingTimer = setTimeout(() => {\n            // Clean up the timer\n            this._showingTimer = null;\n\n            this._diaglogRef = this._dialog.open(IndicatorModal, {\n                width: '250px',\n                data: {\n                    title: title\n                }\n            });\n        }, this._showingDelay);\n\n    }\n\n    public hide() {\n        // If the spinner has not been rendered.\n        if (this._showingTimer) {\n            clearTimeout(this._showingTimer);\n            this._showingTimer = null;\n            return;\n        }\n\n        // If have scheduled to dismiss the spinner,\n        // we better we schedule again.\n        if (this._dismissingTimer) {\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = setTimeout(() => {\n                // Clean up the timer\n                this._dismissingTimer = null;\n\n                // Dismiss the dialog\n                if (this._diaglogRef) {\n                    this._diaglogRef.close();\n                    this._diaglogRef = null;\n                }\n            }, DismissingDelayPeroid);\n\n            return;\n        }\n\n        // Schedule to dismiss the spinner\n        if (this._diaglogRef) {\n            this._dismissingTimer = setTimeout(() => {\n\n                // Dismiss the dialog\n                if (this._diaglogRef) {\n                    this._diaglogRef.close();\n                    this._diaglogRef = null;\n                }\n            }, DismissingDelayPeroid);\n        }\n    }\n}\n\n","import {\n    ModuleWithProviders, NgModule,\n    Optional, SkipSelf\n} from '@angular/core';\n\nimport { MatProgressSpinnerModule } from '@angular/material';\n\nimport { PolpMdIndicatorModal } from './indicator/modal.component';\nimport { PolpMdSpinnerServiceImpl } from './services/spinner-service.impl';\n\n@NgModule({\n    declarations: [PolpMdIndicatorModal],\n    imports: [\n        MatProgressSpinnerModule\n    ],\n    exports: [PolpMdIndicatorModal],\n    entryComponents: [\n        PolpMdIndicatorModal\n    ],\n    providers: [\n        PolpMdSpinnerServiceImpl\n    ]\n})\nexport class PolpMdComponentsModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: PolpMdComponentsModule\n        };\n    }\n\n    constructor(@Optional() @SkipSelf() parentModule: PolpMdComponentsModule) {\n        if (parentModule) {\n            throw new Error(\n                'PolpMdComponentsModule is already loaded. Import it in the AppModule only');\n        }\n    }\n}\n"]}