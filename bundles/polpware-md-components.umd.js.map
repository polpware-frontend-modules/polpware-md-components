{"version":3,"file":"polpware-md-components.umd.js.map","sources":["ng://@polpware/md-components/lib/indicator/modal.component.ts","ng://@polpware/md-components/lib/services/spinner-service.impl.ts","ng://@polpware/md-components/lib/md-components.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\n@Component({\r\n    selector: 'polp-md-indicator-modal',\r\n    templateUrl: 'modal.component.html'\r\n})\r\nexport class PolpMdIndicatorModal {\r\n\r\n    public title: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<PolpMdIndicatorModal>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any) {\r\n        this.title = data.title || '';\r\n    }\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\n\nimport {\n    ISpinnerService\n} from '@polpware/ngx-spinner';\n\nimport { PolpMdIndicatorModal as IndicatorModal } from '../indicator/modal.component';\n\nconst DismissingDelayPeroid = 300;\nconst DefaultShowingDelayPeroid = 500;\n\n@Injectable()\nexport class PolpMdSpinnerServiceImpl implements ISpinnerService {\n\n    private _diaglogRef: MatDialogRef<IndicatorModal>;\n\n    private _showingTimer: any;\n    private _showingDelay: number;\n    private _dismissingTimer: any;\n\n    constructor(private _dialog: MatDialog) {\n        this._showingTimer = null;\n        this._showingDelay = DefaultShowingDelayPeroid;\n        this._dismissingTimer = null;\n        this._diaglogRef = null;\n    }\n\n    public setDelay(seconds: number) {\n        this._showingDelay = seconds * 1000;\n    }\n\n    // Override\n    public show(title: string = 'Loading ...') {\n        // If there is one already, use it.\n        if (this._diaglogRef) {\n\n            // However, we need to cancel the dismiss timer.\n            // It is safe, because we expect that \"hide\" is to be called\n            // sometime later from this moment on.\n            if (this._dismissingTimer) {\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = 0;\n            }\n\n            return;\n        }\n\n        // If we have already scheduled to dismiss the spinner,\n        // we just need to clear the scheduler.\n        // Please refer to the above for the reason.\n        if (this._dismissingTimer) {\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = 0;\n            return;\n        }\n\n        // If we have already scheduled to show the spinner, we just\n        // use this schedule. \n        if (this._showingTimer) {\n            return;\n        }\n\n        // Otherwise, schdule to show the spinner.\n        this._showingTimer = setTimeout(() => {\n            // Clean up the timer\n            this._showingTimer = null;\n\n            this._diaglogRef = this._dialog.open(IndicatorModal, {\n                width: '250px',\n                data: {\n                    title: title\n                }\n            });\n        }, this._showingDelay);\n\n    }\n\n    public hide() {\n        // If the spinner has not been rendered.\n        if (this._showingTimer) {\n            clearTimeout(this._showingTimer);\n            this._showingTimer = null;\n            return;\n        }\n\n        // If have scheduled to dismiss the spinner,\n        // we better we schedule again.\n        if (this._dismissingTimer) {\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = setTimeout(() => {\n                // Clean up the timer\n                this._dismissingTimer = null;\n\n                // Dismiss the dialog\n                if (this._diaglogRef) {\n                    this._diaglogRef.close();\n                    this._diaglogRef = null;\n                }\n            }, DismissingDelayPeroid);\n\n            return;\n        }\n\n        // Schedule to dismiss the spinner\n        if (this._diaglogRef) {\n            this._dismissingTimer = setTimeout(() => {\n\n                // Dismiss the dialog\n                if (this._diaglogRef) {\n                    this._diaglogRef.close();\n                    this._diaglogRef = null;\n                }\n            }, DismissingDelayPeroid);\n        }\n    }\n}\n\n","import {\n    ModuleWithProviders, NgModule,\n    Optional, SkipSelf\n} from '@angular/core';\n\nimport { MatProgressSpinnerModule } from '@angular/material';\n\nimport { PolpMdIndicatorModal } from './indicator/modal.component';\nimport { PolpMdSpinnerServiceImpl } from './services/spinner-service.impl';\n\n@NgModule({\n    declarations: [PolpMdIndicatorModal],\n    imports: [\n        MatProgressSpinnerModule\n    ],\n    exports: [PolpMdIndicatorModal],\n    entryComponents: [\n        PolpMdIndicatorModal\n    ],\n    providers: [\n        PolpMdSpinnerServiceImpl\n    ]\n})\nexport class PolpMdComponentsModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: PolpMdComponentsModule\n        };\n    }\n\n    constructor(@Optional() @SkipSelf() parentModule: PolpMdComponentsModule) {\n        if (parentModule) {\n            throw new Error(\n                'PolpMdComponentsModule is already loaded. Import it in the AppModule only');\n        }\n    }\n}\n"],"names":["Component","MatDialogRef","Inject","MAT_DIALOG_DATA","IndicatorModal","Injectable","MatDialog","NgModule","MatProgressSpinnerModule","Optional","SkipSelf"],"mappings":"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"}
