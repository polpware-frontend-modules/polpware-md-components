{"version":3,"file":"polpware-md-components.js.map","sources":["ng://@polpware/md-components/lib/indicator/modal.component.ts","ng://@polpware/md-components/lib/services/spinner-service.impl.ts","ng://@polpware/md-components/lib/md-components.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n\r\n@Component({\r\n    selector: 'polp-md-indicator-modal',\r\n    templateUrl: 'modal.component.html'\r\n})\r\nexport class PolpMdIndicatorModal {\r\n\r\n    public title: string;\r\n\r\n    constructor(\r\n        public dialogRef: MatDialogRef<PolpMdIndicatorModal>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any) {\r\n        this.title = data.title || '';\r\n    }\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\n\nimport {\n    ISpinnerService\n} from '@polpware/ngx-spinner';\n\nimport { PolpMdIndicatorModal as IndicatorModal } from '../indicator/modal.component';\n\nconst DismissingDelayPeroid = 300;\nconst DefaultShowingDelayPeroid = 500;\n\n@Injectable()\nexport class PolpMdSpinnerServiceImpl implements ISpinnerService {\n\n    private _diaglogRef: MatDialogRef<IndicatorModal>;\n\n    private _showingTimer: any;\n    private _showingDelay: number;\n    private _dismissingTimer: any;\n\n    constructor(private _dialog: MatDialog) {\n        this._showingTimer = null;\n        this._showingDelay = DefaultShowingDelayPeroid;\n        this._dismissingTimer = null;\n        this._diaglogRef = null;\n    }\n\n    public setDelay(seconds: number) {\n        this._showingDelay = seconds * 1000;\n    }\n\n    // Override\n    public show(title: string = 'Loading ...') {\n        // If there is one already, use it.\n        if (this._diaglogRef) {\n\n            // However, we need to cancel the dismiss timer.\n            // It is safe, because we expect that \"hide\" is to be called\n            // sometime later from this moment on.\n            if (this._dismissingTimer) {\n                clearTimeout(this._dismissingTimer);\n                this._dismissingTimer = 0;\n            }\n\n            return;\n        }\n\n        // If we have already scheduled to dismiss the spinner,\n        // we just need to clear the scheduler.\n        // Please refer to the above for the reason.\n        if (this._dismissingTimer) {\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = 0;\n            return;\n        }\n\n        // If we have already scheduled to show the spinner, we just\n        // use this schedule. \n        if (this._showingTimer) {\n            return;\n        }\n\n        // Otherwise, schdule to show the spinner.\n        this._showingTimer = setTimeout(() => {\n            // Clean up the timer\n            this._showingTimer = null;\n\n            this._diaglogRef = this._dialog.open(IndicatorModal, {\n                width: '250px',\n                data: {\n                    title: title\n                }\n            });\n        }, this._showingDelay);\n\n    }\n\n    public hide() {\n        // If the spinner has not been rendered.\n        if (this._showingTimer) {\n            clearTimeout(this._showingTimer);\n            this._showingTimer = null;\n            return;\n        }\n\n        // If have scheduled to dismiss the spinner,\n        // we better we schedule again.\n        if (this._dismissingTimer) {\n            clearTimeout(this._dismissingTimer);\n            this._dismissingTimer = setTimeout(() => {\n                // Clean up the timer\n                this._dismissingTimer = null;\n\n                // Dismiss the dialog\n                if (this._diaglogRef) {\n                    this._diaglogRef.close();\n                    this._diaglogRef = null;\n                }\n            }, DismissingDelayPeroid);\n\n            return;\n        }\n\n        // Schedule to dismiss the spinner\n        if (this._diaglogRef) {\n            this._dismissingTimer = setTimeout(() => {\n\n                // Dismiss the dialog\n                if (this._diaglogRef) {\n                    this._diaglogRef.close();\n                    this._diaglogRef = null;\n                }\n            }, DismissingDelayPeroid);\n        }\n    }\n}\n\n","import {\n    ModuleWithProviders, NgModule,\n    Optional, SkipSelf\n} from '@angular/core';\n\nimport { MatProgressSpinnerModule } from '@angular/material';\n\nimport { PolpMdIndicatorModal } from './indicator/modal.component';\nimport { PolpMdSpinnerServiceImpl } from './services/spinner-service.impl';\n\n@NgModule({\n    declarations: [PolpMdIndicatorModal],\n    imports: [\n        MatProgressSpinnerModule\n    ],\n    exports: [PolpMdIndicatorModal],\n    entryComponents: [\n        PolpMdIndicatorModal\n    ],\n    providers: [\n        PolpMdSpinnerServiceImpl\n    ]\n})\nexport class PolpMdComponentsModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: PolpMdComponentsModule\n        };\n    }\n\n    constructor(@Optional() @SkipSelf() parentModule: PolpMdComponentsModule) {\n        if (parentModule) {\n            throw new Error(\n                'PolpMdComponentsModule is already loaded. Import it in the AppModule only');\n        }\n    }\n}\n"],"names":["IndicatorModal"],"mappings":"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"}
